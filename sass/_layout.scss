.container {

    max-width: 120rem;
    box-shadow: var(--shadow-dark);
    margin: 8rem auto;
    background-color: var(--color-grey-light-1);
    min-height: 50rem;

    // MEDIA QUERY 
    @media only screen and (max-width: $bp-largest) {
        margin: 0;   
        max-width: 100%;
        width: 100%;
    }
}


.header {

    font-size: 1.4rem; // 14px
    min-height: 7rem;
    background-color: #fff;
    border-bottom: var(--line);
    
    // Flex Property
    display: flex;
    justify-content: space-between; 
    align-items: center; // Vertically put element in center 
    
    @media only screen and (max-width:$bp-smallest){
        flex-wrap: wrap; // Refer :POINT 101: in component file. Using flex wrap we are allowing flex items to wrap in 
                        //  new line if enough space is not available in flex container which is header.

        height: 11rem;  // Also, give header container a height because search box now come in 2nd row because of above property.
                        // so it header require more space or you can say more height

        align-content: space-around; // align-content is used to provide space between the row in the container.
    }
}


.content { 

    display: flex;

    @media only screen and (max-width:$bp-medium){
        flex-direction:column;
        
    }

}

.sidebar {

    background-color:  var(--color-grey-dark-1);
    /*
        flex: 0 0 18%;  shorthand notation of below flex property
        It mean flex-grow : 0 we do not want element to grow beside the width of element that we define
                flex-shrink : 0; we also do not want to shrink
                flex-basis : 18% This defines the default size of an element before the remaining space is distributed
    */
    flex: 0 0 18%;

    display: flex;
    flex-direction: column;
    justify-content:space-between;
}

.hotel-view {

    background-color: #fff;

    /*
        flex: 1; shorthand notation of flex: 1 0 0;
        This mean flex-grow : 1 that mean take the entire remaining space
        We can  
    */
    flex: 1;
}


.detail {
    
    font-size: 1.4rem; // Now all elements of detail i.e. 'description' and  'user-reviews' will inherit this font-size
    display: flex;
    padding: 4.5rem;
    background-color: var(--color-grey-light-1);
    border-bottom: var(--line);

    /*
        If we have 2 media query then we put first the large screen media query and then the small one.
    */
    @media only screen and (max-width:$bp-medium){        
        padding: 3rem;
    }

    @media only screen and (max-width:$bp-small){        
        flex-direction: column;
    }
}

.description {

    
    background-color:#fff;
    box-shadow: var(--shadow-light);
    padding:3rem;
    flex: 0 0 60%;
    margin-right: 4.5rem;
    
    @media only screen and (max-width:$bp-medium){        
        padding: 2rem;
        margin-right: 3rem;
    }

    @media only screen and (max-width:$bp-small){        
        margin-right: 0;
        margin-bottom: 3rem;
    }
}

.user-reviews {
   
   flex: 1;

    // to center the 'show all' button    
   display: flex;
   flex-direction: column;
   align-items:center;

   // Why not use test-align:center because it will effect the text of all child element. You can see effect inside the 'review__text' element
}