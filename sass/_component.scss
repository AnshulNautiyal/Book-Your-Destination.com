/////////////////////////////////////////////
// ICON

.logo {

    height: 3.25rem;
    margin-left: 2.5rem;
}

/////////////////////////////////////////////
// SEARCH BOX


.search {

    
    flex: 0 0 40%; // give some width to input field using flex instead of width

    // This flex property is used to align search icon in the center 
    display: flex;
    align-items:center;
    justify-content: center;


    &__input {

        font-family: inherit; // because input field do not inherit font-family automatically, so we have to manually do it .
                            // It inherit from parent which is header tag
        font-size: inherit;  // same as above 
        color: inherit;
        border: none;         
        border-radius: 100px;
        background-color: var(--color-grey-light-2);
        padding: .7rem 2rem;
        width: 90%; // Why 90% because when we click on input we want it to expand to 100%.
                    // this 90% width is reference to its parent which is 40% in width.  
                    // So width is 90% of 40%(parent)

        transition: all .2s;
        margin-right: -3.25rem;

        &:focus {
            outline: none;
            width: 100%;   
            background-color: var(--color-grey-light-3);
        }


        &::-webkit-input-placeholder {
             font-weight: 100;
             color: var(--color-grey-light-4);
        }
    }

    &__input:focus + &__button {
        background-color: var(--color-grey-light-3);
    }

    &__button {

        border: none;
        background-color: var(--color-grey-light-2);

        &:focus {
            outline: none;
        }

        &:active {
            transform: translateY(2px); 
        }
    }

    &__icon {

        height: 2rem;
        width: 2rem;
        // fill is used to add color in SVG
        fill: var(--color-grey-dark-3);
    }
}


/////////////////////////////////////////////
// USER NAVIGATION

.user-nav {

   
   
    display: flex;
    align-items: center;
    align-self: stretch;


    & > * {  // select all the DIRECT children of 'user-nav' element... this Symbol '>' mean direct children

        padding: 0 2rem;
        cursor: pointer;
        height: 100%;
        display: flex;
        align-items: center;
    }
    & > *:hover {
            background-color:var(--color-grey-light-2);    
    }

    &__icon-box {
        
        position: relative;
        
    }
    


    &__icon {

         
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2);
    }

    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 1000px;
        background-color: var(--color-primary);
        color: #ffffff;
        font-weight: 900;

        position: absolute;
        top: 1.5rem;
        right: 1.3rem;

        // to center the notification number
        display: flex;
        align-items: center;
        justify-content:center;
    }

    &__user-photo {

        height: 3.75rem;
        border-radius: 50%;
    }

    &__user-name {
        padding: 1rem;
    }
}

/////////////////////////////////////////////
// SIDE NAVIGATON


.side-nav {

    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;


    &__item {
        
        position: relative;

        &:not(:last-child){
            margin-bottom: .5rem;
        }
        
    }

    &__item:before {
        
        content:"";
        position: absolute;
        top: 0;
        left: 0;
        background-color: var(--color-primary);
        height: 100%;
        width: 3px;
        transform:scaleY(0);
        transition: transform .2s,
                    width .4s cubic-bezier(1,0,0,1 ) .2s,
                    background-color .1s;  
        
        /*
            Transition can take multiple setting like this.
            For above transition property : transform  property [REFER:POINT 2:] should take .2sec to complete the effect  [REFER:POINT 2:]
                                            and width property [REFER:POINT 2:] should take .4sec to complete with a .2sec delay so that 
                                            transform  property should finished in that time period. cubic-bezier() is kind of effect that
                                            width will take
        */

    }

    &__item:hover::before,
    &__item--active::before {
        // REFER:POINT 2:
        transform:scaleY(1);
        width: 100%;
        
    }

    &__item:active::before {
        background-color: var(--color-primary-dark);
        
    }

    &__link:link,
    &__link:visited {

        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;

        // you can't use z-index without position property. If you are using z-index property then
        // you must use any position property. otherwise z-index will not work
        // why we use z-index because pink color animation hide the all the link (icon + Text) from navigation menu.
        position: relative;
        z-index: 10000;

        display: flex;
        align-items: center; // center element vertically
    }

    &__icon {

        height: 1.75rem;
        width: 1.75rem;
        margin-right: 2rem;
        fill: currentColor;  // currentColor is basically the color of current element or parent element
    }
}

/////////////////////////////////////////////
// LEGAL TEXT

.legal {

    color: var(--color-grey-light-4);
    font-size: 1.5rem;
    text-align: center;
    padding:2.5rem;

}

/////////////////////////////////////////////
// HOTEL IMAGES

.gallery {

    /*
        We use flex here to align photo side by side.
        BUT, if we do not want to use flex then use below in gallery__item class:-
        width:33.3333%;
        float:left;
        
        AND, then use clearfix in parent property. 
        But this is bunch of work to do, so we use flex for this.

    */
    display: flex; 

    &__photo {

        width: 100%;
        display: block;
    }
}


/////////////////////////////////////////////
// HOTEL OVERVIEW

.overview {

    display: flex;
    border-bottom: --line;
    align-items: center;
    

    &__heading {
        font-size:2.25rem;
        font-weight: 100;
        letter-spacing: 1px;
        text-transform: uppercase;
        padding:1.5rem 3rem;

    }

    &__stars {

        // Why matgin-right: auto : https://css-tricks.com/the-peculiar-magic-of-flexbox-and-auto-margins/
        margin-right: auto;

        /*
            Why use flex here?? 
            If you see there is space/gap below each of the star icon. That's why even star icon are vertically centered but still due
            to this space/gap below the star they do not look center (but they are in the center).

            Why there is gap below star because star icon are svg and svg element behave like inline element, so its a bit like text.
            So that produce space below the star.

            So to avoid this small gap issue so that star can come to center exactly, we can set 'line-height' and 'font-size' to zero 
            OR 
            we have simple solution : simply set parent element to flex by using 'display:flex'. Now all star icon become flex item. so
            space/gap below them is gone as they are no longer behave as inline-element because they are now flex element .
            since '&__stars' is parent to '&__icon-star' element, so we set flex here.
            so parent element height is exactly same as child element (star icon) as space/gap below the star is gone. So they are perfectly 
            vertically centered.
        */
        display: flex;
    }

    &__icon-star,
    &__icon-location {

        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__icon-location {
        margin-right: .5rem;
    }

    &__location {
        display: flex;
        align-items:center;
        font-size: 1.2rem;
    }

    &__rating {

        background-color: var(--color-primary);
        color: #ffffff;
        margin-left: 3rem;
        padding: 0 2.25rem;

        align-self: stretch;


        display: flex;
        flex-direction:column;
        justify-content:center;
        align-items:center;

        

    }   

    &__rating-average {

        font-size: 2.25rem;
        font-weight: 700;
        margin-bottom: -.3rem;
    }

    &__rating-count {

        font-size: 1rem;
        font-weight: 900;
        text-transform: uppercase;
    }
}


/////////////////////////////////////////////
// BUTTON INLINE

.btn-inline {

    color: var(--color-primary);
    border: none;
    font-size:inherit;
    border-bottom: 1px solid currentColor;
    background-color: transparent;
    padding-bottom: .2rem;
    display: inline-block;
    cursor: pointer;
    transition: all .2s;
    
    & span {
        margin-left: .3rem;
        transition: margin-left .2s;
    }

    &:hover {
        color: var(--color-grey-dark-1);
               
        span {
            margin-left: .8rem;
        }
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
 
    }




}

@keyframes pulsate{

    0% {
        transform: scale(1);
        box-shadow: none;
    }
    50% {
        transform:scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0,0,0,.25);
    }
    100% {
        transform: scale(1);
        box-shadow: none;
    }
}

/////////////////////////////////////////////
// PARAGRAPH
.paragraph:not(:last-of-type) {
    margin-bottom: 2rem;
}

/////////////////////////////////////////////
// LIST

.list {
    list-style: none;
    margin: 3rem 0;
    padding: 3rem 0;
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex;
    flex-wrap: wrap;

    &__item {
        // No need to use width property, instead use flex as shown below to give width to each element.
        flex: 0 0  50%;
        margin-bottom:  .7rem;
    }
    &__item::before {
        content: "";
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-right: .7rem;

        /*  This approach is for including SVG icon through CSS. We use CSS way to add SVG icon instead of adding SVG icon through HTML
            because then we have to write lot of HTML code for adding 8 svg angle bracket icon in our list.
            But in CSS we have to add icon in background image property on that element and then it will automatically add to all list
            item. So yeah less code.
            But there is problem with background-image that we can not use 'fill' property on it to add color in SVG icon.
            So we  will use 'mask' property for this BUT 'mask' will work on modern browser and not supported on old browser.
            'background-image' property solution is for old browser. So if you do not want to change color, go for this BUT
            For modern browser, go for 'mask' property so that you can use 'fill' property to change color of SVG icon.
        */

        // For older browser
        // background-image: url(../img/chevron-thin-right.svg);
        // background-size: cover;


        // For Newer Browser: use 'mask'
        background-color:var(--color-primary);
        -webkit-mask-image: url(../img/chevron-thin-right.svg); // Similar to background-image
        -webkit-mask-size: cover; // Similar to background-size

        // When  all browser start supporting mask property
        mask-image: url(../img/chevron-thin-right.svg); // Similar to background-image
        mask-size: cover;

        /*
            WHat is mask? See youtube video 
        */

    }
    
}



/////////////////////////////////////////////
// RECOMMEND


.recommend {    

    font-size: 1.3rem;
    color: var(--color-grey-dark-3);
    display: flex;
    align-items: center;

    &__count {
        margin-right: auto;
    }

    &__friends {

    }

    &__photo {

        width:4rem;
        height: 4rem;
        border-radius: 50%;
        &:not(:last-child) {
            margin-right: -1.5rem;
        }
        
        border: 3px solid #fff;    
        /* If you give border to image, the image become small because we  give box-sizing: border-box; property 
            in our html so that  child also inherit that property. BUT here we do not want box-sizing: border-box;
            because we do not want border size become part of image size due to which image size decreased.
            We want border 3px size will take its own space so that it will not effect the image size.
            For that will use box-sizing: content-box; property.
            
        */
        box-sizing: content-box;
    }
}


/////////////////////////////////////////////
// REVIEWS

.review {

    background-color:#fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    overflow: hidden; // Since big double qoute is overflowing out of the box

    //SEE :POINT 4:
    position: relative;
    

    &__text {

        margin-bottom: 2rem;

        // Refer :POINT 5: NOTE: since we are using z-index here, we have to give position property as both are related to each other
        z-index: 10;
        position: relative;
    }

    &__user {

        display: flex;
        align-items: center;
    }

    &__photo {

        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1.5rem;
    }

    &__user-box {
        // We put margin-right here because we want rating element to go at extreme right
        margin-right: auto; 
    }

    &__user-name {
        font-size: 1.1rem;
        font-weight: 700;
        text-transform: uppercase;
        margin-bottom: .4rem;
    }

    &__user-date {
        font-size: 1.1rem;
        color: var(--color-grey-dark-3);
    }

    &__rating {

        color: var(--color-primary);
        font-size: 2.2rem;
        font-weight: 300; 
        
    }


    &:before {
        content: "\201C";
        // :POINT 4:
        position: absolute;
        top:-2.75rem;
        left:-1rem;
        color: var(--color-grey-light-2);
        font-size: 20rem;
        line-height:1;
        font-family:sans-serif;
        

        // :POINT 5:  NOTE: we are using z-index here. SP position should also be there.
        z-index: 1;
    }
}


/////////////////////////////////////////////
//  BOOKING BUTTON


.cta {
    padding: 3.5rem 0;
    text-align: center;

    &__book {
        font-size: 2rem;
        font-weight: 300;
        text-transform: uppercase;
        margin-bottom: 2.5rem;

    }
}

.btn {

    font-size: 1.5rem;
    font-weight: 300;
    text-transform: uppercase;
    border:none;
    border-radius: 100px;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: #fff;
    position: relative; // since 'btn_invisible' element have position: absolute property. Then parent element must have position: relative; property. 
    overflow: hidden;// since initially 'btn_invisible' element is just above 'btn_visible' element. So it act as overflow. So to hide the 
                    // 'btn_invisible' element use overflow: hidden;

    cursor: pointer;

    

    //  since below property is common in both element 'btn_invisible' and 'btn_visible'. So, we put them in & > * 
    & > * { 
        // Since it is span element and span element is inline element. SO to apply padding on it we make it inline-block;
        display: inline-block; 
        height: 100%; // height will be respective of parent element. Same for width
        width: 100%;
        transition: all .2s;
    }
    &__visible {
        
        padding: 2rem 7.5rem; // This padding helps in define the size of button

    }

    &__invisible {
        
        position: absolute;
        top:-100%; // :POINT 6: - move element exactly the size of the element. So for eg. if element is 50px height then i will move 100% of it. ie. 50px above
        left:0;
        padding: 2rem 0;
        transition: all .2s;
    }

    // IMPORTANT SYNTAX FOR HOVER ON 2 ELEMENT ON IT.
    &:hover  &__visible  {

        // we will not use top here because we are not using position absolute. So we are using transform: translateY();
        transform: translateY(100%); 
        // translate down to 100% of its height.Same logic as in :POINT 6:
        // That's why we use height property to 100%.
    }
    &:hover  &__invisible  {

        top:0; // form -100% to 0; on hover

    }
    &:hover {
        background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
        // we can not apply transition because transition will not work on background-image property
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
    }
}