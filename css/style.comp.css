/*
    Now instead of SASS variable, we use CSS variable as they can do same thing as SASS variable also can be inherited and manipulated 
    by javaScript. Also we can edit them in devTools. 
    CSS variable are defined with the block (curly bracket). We can put CSS variable in any selector but the that variable can only be accessible
    inside that block only and also its children. So it is good practice to define the variable inside the root block 
    (declaration block) so that they are available in one central place and can be access any where from the page.
    So we use root pseudo class for CSS variable. We can use html selector but since root pseudo have high priority then html so we will
    sue root pseudo class. So variables define inside the root selector are become global and the accessible inside the child element.
*/
:root {
  --color-primary:  #eb2f64;
  --color-primary-light: #FF3366;
  --color-primary-dark: #BA265D;
  --color-grey-light-1: #faf9f9;
  --color-grey-light-2: #f4f2f2;
  --color-grey-light-3: #f0eeee;
  --color-grey-light-4: #ccc;
  --color-grey-dark-1: #333;
  --color-grey-dark-2: #777;
  --color-grey-dark-3: #999;
  --shadow-dark: 0 2rem 6rem rgba(0, 0, 0, .3);
  --shadow-light:0 2rem 5rem rgba(0,0,0,.2);
  --line: 1px solid var(--color-grey-light-2); }

* {
  margin: 0;
  padding: 0; }

/*  Here i set box-sizing as border-box so that child element can inherit it.
    Refer : POINT:1:
*/
html {
  box-sizing: border-box;
  font-size: 62.5%; }
  @media only screen and (max-width: 68.75em) {
    html {
      font-size: 50%; } }

/*
    Now as per POINT:1: we want all element should inherit box-sizing property 
    which i used in html tag.
*/
*,
*::after,
*::before {
  box-sizing: inherit; }

body {
  font-family: 'Open Sans', sans-serif;
  background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark));
  background-size: cover;
  background-repeat: no-repeat;
  color: var(--color-grey-dark-2);
  min-height: 100vh;
  /*
        Why min-height instead of height is because we want as we add more and more component in the page this pink background
        should also increase. If we use height property only then only the device screen is pink background and if we scroll down
        then it will not be pink back-ground instead of that it will be white back-ground.
        SIMPLE WORD: if page is bigger then the screen size then pink back-ground should also increase.

        Also why vh instead of px or % because as we decrease browser size , we want that pink color should be visible in 100% of current 
        browser/device size;
    */ }

.logo {
  height: 3.25rem;
  margin-left: 2.5rem; }

.search {
  flex: 0 0 40%;
  display: flex;
  align-items: center;
  justify-content: center; }
  @media only screen and (max-width: 31.25em) {
    .search {
      flex: 0 0 100%;
      order: 1;
      background-color: var(--color-grey-light-2); } }
  .search__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    border: none;
    border-radius: 100px;
    background-color: var(--color-grey-light-2);
    padding: .7rem 2rem;
    width: 90%;
    transition: all .2s;
    margin-right: -3.25rem; }
    .search__input:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3); }
    .search__input::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-dark-3); }
  .search__input:focus + .search__button {
    background-color: var(--color-grey-light-3); }
  .search__button {
    border: none;
    background-color: var(--color-grey-light-2); }
    .search__button:focus {
      outline: none; }
    .search__button:active {
      transform: translateY(2px); }
  .search__icon {
    height: 2rem;
    width: 2rem;
    fill: var(--color-grey-dark-3); }

.user-nav {
  display: flex;
  align-items: center;
  align-self: stretch; }
  .user-nav > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;
    display: flex;
    align-items: center; }
  .user-nav > *:hover {
    background-color: var(--color-grey-light-2); }
  .user-nav__icon-box {
    position: relative; }
  .user-nav__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2); }
  .user-nav__notification {
    font-size: .8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 1000px;
    background-color: var(--color-primary);
    color: #ffffff;
    font-weight: 900;
    position: absolute;
    top: 1.5rem;
    right: 1.3rem;
    display: flex;
    align-items: center;
    justify-content: center; }
  .user-nav__user-photo {
    height: 3.75rem;
    border-radius: 50%; }
  .user-nav__user-name {
    padding: 1rem; }

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem; }
  @media only screen and (max-width: 56.25em) {
    .side-nav {
      display: flex;
      margin: 0; } }
  .side-nav__item {
    position: relative; }
    .side-nav__item:not(:last-child) {
      margin-bottom: .5rem; }
      @media only screen and (max-width: 56.25em) {
        .side-nav__item:not(:last-child) {
          margin-bottom: 0; } }
    @media only screen and (max-width: 56.25em) {
      .side-nav__item {
        flex: 1; } }
  .side-nav__item:before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    background-color: var(--color-primary);
    height: 100%;
    width: 3px;
    transform: scaleY(0);
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s, background-color 0.1s;
    /*
            Transition can take multiple setting like this.
            For above transition property : transform  property [REFER:POINT 2:] should take .2sec to complete the effect  [REFER:POINT 2:]
                                            and width property [REFER:POINT 2:] should take .4sec to complete with a .2sec delay so that 
                                            transform  property should finished in that time period. cubic-bezier() is kind of effect that
                                            width will take
        */ }
  .side-nav__item:hover::before, .side-nav__item--active::before {
    transform: scaleY(1);
    width: 100%; }
  .side-nav__item:active::before {
    background-color: var(--color-primary-dark); }
  .side-nav__link:link, .side-nav__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;
    position: relative;
    z-index: 10000;
    display: flex;
    align-items: center; }
    @media only screen and (max-width: 56.25em) {
      .side-nav__link:link, .side-nav__link:visited {
        justify-content: center;
        padding: 2rem; } }
    @media only screen and (max-width: 37.5em) {
      .side-nav__link:link, .side-nav__link:visited {
        flex-direction: column;
        padding: 1.5rem .5rem; } }
  .side-nav__icon {
    height: 1.75rem;
    width: 1.75rem;
    margin-right: 2rem;
    fill: currentColor; }
    @media only screen and (max-width: 37.5em) {
      .side-nav__icon {
        margin-right: 0;
        margin-bottom: .7rem; } }

.legal {
  color: var(--color-grey-light-4);
  font-size: 1.5rem;
  text-align: center;
  padding: 2.5rem; }
  @media only screen and (max-width: 56.25em) {
    .legal {
      display: none; } }

.gallery {
  /*
        We use flex here to align photo side by side.
        BUT, if we do not want to use flex then use below in gallery__item class:-
        width:33.3333%;
        float:left;
        
        AND, then use clearfix in parent property. 
        But this is bunch of work to do, so we use flex for this.

    */
  display: flex; }
  .gallery__photo {
    width: 100%;
    display: block; }

.overview {
  display: flex;
  border-bottom: --line;
  align-items: center; }
  .overview__heading {
    font-size: 2.25rem;
    font-weight: 100;
    letter-spacing: 1px;
    text-transform: uppercase;
    padding: 1.5rem 3rem; }
    @media only screen and (max-width: 37.5em) {
      .overview__heading {
        font-size: 1.8rem;
        padding: 1.25rem 2rem; } }
  .overview__stars {
    margin-right: auto;
    /*
            Why use flex here?? 
            If you see there is space/gap below each of the star icon. That's why even star icon are vertically centered but still due
            to this space/gap below the star they do not look center (but they are in the center).

            Why there is gap below star because star icon are svg and svg element behave like inline element, so its a bit like text.
            So that produce space below the star.

            So to avoid this small gap issue so that star can come to center exactly, we can set 'line-height' and 'font-size' to zero 
            OR 
            we have simple solution : simply set parent element to flex by using 'display:flex'. Now all star icon become flex item. so
            space/gap below them is gone as they are no longer behave as inline-element because they are now flex element .
            since '&__stars' is parent to '&__icon-star' element, so we set flex here.
            so parent element height is exactly same as child element (star icon) as space/gap below the star is gone. So they are perfectly 
            vertically centered.
        */
    display: flex; }
  .overview__icon-star, .overview__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary); }
  .overview__icon-location {
    margin-right: .5rem; }
  .overview__location {
    display: flex;
    align-items: center;
    font-size: 1.2rem; }
  .overview__rating {
    background-color: var(--color-primary);
    color: #ffffff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    align-self: stretch;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center; }
    @media only screen and (max-width: 37.5em) {
      .overview__rating {
        padding: 0 1.5rem; } }
  .overview__rating-average {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: -.3rem; }
    @media only screen and (max-width: 37.5em) {
      .overview__rating-average {
        font-size: 1.8rem; } }
  .overview__rating-count {
    font-size: 1rem;
    font-weight: 900;
    text-transform: uppercase; }
    @media only screen and (max-width: 37.5em) {
      .overview__rating-count {
        font-size: .5rem; } }

.btn-inline {
  color: var(--color-primary);
  border: none;
  font-size: inherit;
  border-bottom: 1px solid currentColor;
  background-color: transparent;
  padding-bottom: .2rem;
  display: inline-block;
  cursor: pointer;
  transition: all .2s; }
  .btn-inline span {
    margin-left: .3rem;
    transition: margin-left .2s; }
  .btn-inline:hover {
    color: var(--color-grey-dark-1); }
    .btn-inline:hover span {
      margin-left: .8rem; }
  .btn-inline:focus {
    outline: none;
    animation: pulsate 1s infinite; }

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none; }
  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25); }
  100% {
    transform: scale(1);
    box-shadow: none; } }

.paragraph:not(:last-of-type) {
  margin-bottom: 2rem; }

.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);
  display: flex;
  flex-wrap: wrap; }
  .list__item {
    flex: 0 0  50%;
    margin-bottom: .7rem; }
  .list__item::before {
    content: "";
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: .7rem;
    /*  This approach is for including SVG icon through CSS. We use CSS way to add SVG icon instead of adding SVG icon through HTML
            because then we have to write lot of HTML code for adding 8 svg angle bracket icon in our list.
            But in CSS we have to add icon in background image property on that element and then it will automatically add to all list
            item. So yeah less code.
            But there is problem with background-image that we can not use 'fill' property on it to add color in SVG icon.
            So we  will use 'mask' property for this BUT 'mask' will work on modern browser and not supported on old browser.
            'background-image' property solution is for old browser. So if you do not want to change color, go for this BUT
            For modern browser, go for 'mask' property so that you can use 'fill' property to change color of SVG icon.
        */
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover; }
    @supports (-webkit-mask-image: url()) or (mask-image: url()) {
      .list__item::before {
        background-color: var(--color-primary);
        -webkit-mask-image: url(../img/chevron-thin-right.svg);
        -webkit-mask-size: cover;
        mask-image: url(../img/chevron-thin-right.svg);
        mask-size: cover;
        background-image: none;
        /*
                WHat is mask? See youtube video 
            */ } }

.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);
  display: flex;
  align-items: center; }
  .recommend__count {
    margin-right: auto; }
  .recommend__friends {
    display: flex; }
  .recommend__photo {
    width: 4rem;
    height: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;
    /* If you give border to image, the image become small because we  give box-sizing: border-box; property 
            in our html so that  child also inherit that property. BUT here we do not want box-sizing: border-box;
            because we do not want border size become part of image size due to which image size decreased.
            We want border 3px size will take its own space so that it will not effect the image size.
            For that will use box-sizing: content-box; property.
            
        */
    box-sizing: content-box; }
    .recommend__photo:not(:last-child) {
      margin-right: -2rem; }

.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  overflow: hidden;
  position: relative; }
  @media only screen and (max-width: 56.25em) {
    .review {
      padding: 2rem;
      margin-bottom: 3rem; } }
  .review__text {
    margin-bottom: 2rem;
    z-index: 10;
    position: relative; }
  .review__user {
    display: flex;
    align-items: center; }
  .review__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem; }
  .review__user-box {
    margin-right: auto; }
  .review__user-name {
    font-size: 1.1rem;
    font-weight: 700;
    text-transform: uppercase;
    margin-bottom: .4rem; }
  .review__user-date {
    font-size: 1.1rem;
    color: var(--color-grey-dark-3); }
  .review__rating {
    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300; }
  .review:before {
    content: "\201C";
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    color: var(--color-grey-light-2);
    font-size: 20rem;
    line-height: 1;
    font-family: sans-serif;
    z-index: 1; }

.cta {
  padding: 3.5rem 0;
  text-align: center; }
  @media only screen and (max-width: 56.25em) {
    .cta {
      padding: 2.5rem 0; } }
  .cta__book {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem; }

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border: none;
  border-radius: 100px;
  background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
  color: #fff;
  position: relative;
  overflow: hidden;
  cursor: pointer; }
  .btn > * {
    display: inline-block;
    height: 100%;
    width: 100%;
    transition: all .2s; }
  .btn__visible {
    padding: 2rem 7.5rem; }
  .btn__invisible {
    position: absolute;
    top: -100%;
    left: 0;
    padding: 2rem 0;
    transition: all .2s; }
  .btn:hover .btn__visible {
    transform: translateY(100%); }
  .btn:hover .btn__invisible {
    top: 0; }
  .btn:hover {
    background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark)); }
  .btn:focus {
    outline: none;
    animation: pulsate 1s infinite; }

.container {
  max-width: 120rem;
  box-shadow: var(--shadow-dark);
  margin: 8rem auto;
  background-color: var(--color-grey-light-1);
  min-height: 50rem; }
  @media only screen and (max-width: 75em) {
    .container {
      margin: 0;
      max-width: 100%;
      width: 100%; } }

.header {
  font-size: 1.4rem;
  min-height: 7rem;
  background-color: #fff;
  border-bottom: var(--line);
  display: flex;
  justify-content: space-between;
  align-items: center; }
  @media only screen and (max-width: 31.25em) {
    .header {
      flex-wrap: wrap;
      height: 11rem;
      align-content: space-around; } }

.content {
  display: flex; }
  @media only screen and (max-width: 56.25em) {
    .content {
      flex-direction: column; } }

.sidebar {
  background-color: var(--color-grey-dark-1);
  /*
        flex: 0 0 18%;  shorthand notation of below flex property
        It mean flex-grow : 0 we do not want element to grow beside the width of element that we define
                flex-shrink : 0; we also do not want to shrink
                flex-basis : 18% This defines the default size of an element before the remaining space is distributed
    */
  flex: 0 0 18%;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }

.hotel-view {
  background-color: #fff;
  /*
        flex: 1; shorthand notation of flex: 1 0 0;
        This mean flex-grow : 1 that mean take the entire remaining space
        We can  
    */
  flex: 1; }

.detail {
  font-size: 1.4rem;
  display: flex;
  padding: 4.5rem;
  background-color: var(--color-grey-light-1);
  border-bottom: var(--line);
  /*
        If we have 2 media query then we put first the large screen media query and then the small one.
    */ }
  @media only screen and (max-width: 56.25em) {
    .detail {
      padding: 3rem; } }
  @media only screen and (max-width: 37.5em) {
    .detail {
      flex-direction: column; } }

.description {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  flex: 0 0 60%;
  margin-right: 4.5rem; }
  @media only screen and (max-width: 56.25em) {
    .description {
      padding: 2rem;
      margin-right: 3rem; } }
  @media only screen and (max-width: 37.5em) {
    .description {
      margin-right: 0;
      margin-bottom: 3rem; } }

.user-reviews {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center; }
